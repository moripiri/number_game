{"ast":null,"code":"var _jsxFileName = \"/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport soundEffects from \"./utils/soundEffects\";\nimport \"./App.css\";\n\n// Simple modal popup for game instructions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HowToPlayModal({\n  open,\n  onClose\n}) {\n  if (!open) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"You can remove two numbers if they are \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"adjacent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 54\n          }, this), \" (including diagonals), or if there are no numbers between them (even across rows).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"The two numbers must be \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"the same\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 39\n          }, this), \" or \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"sum to 10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 58\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"You can add a new set of 36 numbers up to 5 times using the Add Numbers button.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click two numbers to try to remove them. If not removable, your selection will be cleared.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-modal\",\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n// Main React component for the Number Game\n_c = HowToPlayModal;\nexport default function App() {\n  _s();\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n  // showHowTo: controls visibility of the How to Play modal\n  const [showHowTo, setShowHowTo] = useState(false);\n  // animation states\n  const [shakeBoard, setShakeBoard] = useState(false);\n  const [removedCells, setRemovedCells] = useState([]);\n  const [successCells, setSuccessCells] = useState([]);\n  const [newNumbers, setNewNumbers] = useState([]);\n  const [emptyCells, setEmptyCells] = useState([]);\n  const [isExpanding, setIsExpanding] = useState(false);\n  // sound on/off state\n  const [soundOn, setSoundOn] = useState(true);\n\n  // Toggle sound\n  const toggleSound = () => {\n    const newSoundOn = !soundOn;\n    setSoundOn(newSoundOn);\n    soundEffects.setMuted(!newSoundOn);\n  };\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then(data => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Validate board and indices to prevent errors\n    if (!game || !game.board || row < 0 || row >= game.board.length || col < 0 || col >= game.board[row].length || game.board[row][col] === null) return;\n\n    // Resume audio context on first interaction\n    soundEffects.resume();\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      soundEffects.click();\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Play pop sound for selection\n      soundEffects.pop();\n\n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, {\n        row,\n        col,\n        key: cellKey,\n        value: game.board[row][col]\n      }];\n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        if (canRemove(cell1, cell2)) {\n          // Play success sound\n          soundEffects.success();\n\n          // Add success animation for selected cells\n          setSuccessCells([cell1.key, cell2.key]);\n          setTimeout(() => setSuccessCells([]), 500);\n          handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n          setSelectedCells([]); // Clear selection after attempt\n        } else {\n          // Play error sound\n          soundEffects.error();\n\n          // If not removable, trigger shake animation\n          setShakeBoard(true);\n          setTimeout(() => setShakeBoard(false), 500);\n          setSelectedCells([]);\n        }\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Checks if two selected cells can be removed (same number or sum to 10)\n  const canRemove = (cell1, cell2) => {\n    return cell1.value === cell2.value || cell1.value + cell2.value === 10;\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    // Add fade out animation for cells being removed\n    const cell1Key = `${pos1[0]},${pos1[1]}`;\n    const cell2Key = `${pos2[0]},${pos2[1]}`;\n    setRemovedCells([cell1Key, cell2Key]);\n    removeNumbers(game, pos1, pos2).then(data => {\n      // Play remove sound\n      soundEffects.remove();\n      setGame(data); // Update the board with the new state\n      // Clear removed cells animation after a short delay\n      setTimeout(() => setRemovedCells([]), 300);\n      // Check if game is won\n      if (data.game_won) {\n        // Play win sound\n        soundEffects.win();\n        setTimeout(() => alert(\"Game Win! 🎉\"), 800); // Delay alert to let win sound play\n      }\n    }).catch(async error => {\n      // If error, show a message and clear selection\n      let message = \"제거할 수 없습니다.\";\n      if (error && error.response) {\n        try {\n          const errJson = await error.response.json();\n          if (errJson && errJson.detail) message = errJson.detail;\n        } catch {}\n      }\n      alert(message);\n      setSelectedCells([]); // Only clear selection, don't change the board\n      setRemovedCells([]); // Clear removed cells animation\n    });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n\n    // Request animation states from backend\n    addNumbers(game, true).then(data => {\n      if (data.animation && data.states) {\n        // Handle animation states\n        animateAddNumbers(data.states);\n      } else {\n        // Fallback to immediate update (no animation)\n        setGame(data);\n      }\n    }).catch(error => {\n      console.error(\"Failed to add numbers:\", error);\n      // Fallback to non-animated version\n      addNumbers(game, false).then(data => {\n        setGame(data);\n      });\n    });\n  };\n\n  // Animate the placement of numbers step by step\n  const animateAddNumbers = animationStates => {\n    let currentStep = 0;\n    const animateStep = () => {\n      if (currentStep >= animationStates.length) {\n        // Clear animation state when complete\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        return; // Animation complete\n      }\n      const step = animationStates[currentStep];\n      if (step.step === \"empty_board\") {\n        // Show empty board with new rows\n        setGame(step.state);\n        setIsExpanding(true);\n\n        // Mark all new empty cells for fade-in animation\n        const newEmptyCells = [];\n        const originalRowCount = game.board.length;\n        for (let i = originalRowCount; i < step.state.board.length; i++) {\n          for (let j = 0; j < step.state.board[i].length; j++) {\n            newEmptyCells.push(`${i},${j}`);\n          }\n        }\n        setEmptyCells(newEmptyCells);\n        currentStep++;\n        setTimeout(animateStep, 500); // Wait 500ms before starting to place numbers\n      } else if (step.step === \"place_number\") {\n        // Place number with animation\n        setGame(step.state);\n        setIsExpanding(false); // Stop expanding animation when placing numbers\n\n        // Mark the newly placed number for drop-in animation\n        const newNumberKey = `${step.position[0]},${step.position[1]}`;\n        setNewNumbers([newNumberKey]);\n\n        // Play sound for number placement\n        soundEffects.pop();\n        currentStep++;\n        // Faster animation for number placement (100ms between each number)\n        setTimeout(animateStep, 100);\n      } else if (step.step === \"complete\") {\n        // Final state\n        setGame(step.state);\n        // Clear animation state\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        // Play completion sound\n        soundEffects.success();\n      }\n    };\n\n    // Start animation\n    animateStep();\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 25\n  }, this);\n\n  // Main render: title, controls row (new game left, add right), and board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `sound-toggle-btn${soundOn ? \"\" : \" sound-off\"}`,\n      onClick: toggleSound,\n      title: soundOn ? \"효과음 끄기\" : \"효과음 켜기\",\n      \"aria-label\": soundOn ? \"효과음 끄기\" : \"효과음 켜기\",\n      children: soundOn ? \"🔊\" : \"🔇\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"howto-btn\",\n      onClick: () => {\n        soundEffects.resume();\n        soundEffects.click();\n        setShowHowTo(true);\n      },\n      title: \"How to Play\",\n      children: \"?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HowToPlayModal, {\n      open: showHowTo,\n      onClose: () => setShowHowTo(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-title\",\n      children: \"Number Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: startNewGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), game && /*#__PURE__*/_jsxDEV(Controls, {\n        remaining: game.remaining_adds,\n        onAdd: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: (game === null || game === void 0 ? void 0 : game.board) || [],\n      onCellClick: handleCellClick,\n      selectedCells: selectedCells,\n      isCellSelected: isCellSelected,\n      shakeBoard: shakeBoard,\n      removedCells: removedCells,\n      successCells: successCells,\n      newNumbers: newNumbers,\n      emptyCells: emptyCells\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 271,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6ZVPxhl24/Nn0zo5Z5ADhV6/6J4=\");\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"HowToPlayModal\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","startGame","removeNumbers","addNumbers","Board","Controls","soundEffects","jsxDEV","_jsxDEV","HowToPlayModal","open","onClose","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","game","setGame","selectedCells","setSelectedCells","isLoading","setIsLoading","showHowTo","setShowHowTo","shakeBoard","setShakeBoard","removedCells","setRemovedCells","successCells","setSuccessCells","newNumbers","setNewNumbers","emptyCells","setEmptyCells","isExpanding","setIsExpanding","soundOn","setSoundOn","toggleSound","newSoundOn","setMuted","startNewGame","resume","click","then","data","catch","error","console","handleCellClick","row","col","board","length","cellKey","isAlreadySelected","some","cell","key","filter","pop","newSelected","value","cell1","cell2","canRemove","success","setTimeout","handleRemove","pos1","pos2","cell1Key","cell2Key","remove","game_won","win","alert","message","response","errJson","json","detail","handleAdd","animation","states","animateAddNumbers","animationStates","currentStep","animateStep","step","state","newEmptyCells","originalRowCount","i","j","push","newNumberKey","position","isCellSelected","title","remaining","remaining_adds","onAdd","onCellClick","_c2","$RefreshReg$"],"sources":["/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport soundEffects from \"./utils/soundEffects\";\nimport \"./App.css\";\n\n// Simple modal popup for game instructions\nfunction HowToPlayModal({ open, onClose }) {\n  if (!open) return null;\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <h2>How to Play</h2>\n        <ul>\n          <li>At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).</li>\n          <li>You can remove two numbers if they are <b>adjacent</b> (including diagonals), or if there are no numbers between them (even across rows).</li>\n          <li>The two numbers must be <b>the same</b> or <b>sum to 10</b>.</li>\n          <li>You can add a new set of 36 numbers up to 5 times using the Add Numbers button.</li>\n          <li>Click two numbers to try to remove them. If not removable, your selection will be cleared.</li>\n        </ul>\n        <button className=\"close-modal\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\n// Main React component for the Number Game\nexport default function App() {\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n  // showHowTo: controls visibility of the How to Play modal\n  const [showHowTo, setShowHowTo] = useState(false);\n  // animation states\n  const [shakeBoard, setShakeBoard] = useState(false);\n  const [removedCells, setRemovedCells] = useState([]);\n  const [successCells, setSuccessCells] = useState([]);\n  const [newNumbers, setNewNumbers] = useState([]);\n  const [emptyCells, setEmptyCells] = useState([]);\n  const [isExpanding, setIsExpanding] = useState(false);\n  // sound on/off state\n  const [soundOn, setSoundOn] = useState(true);\n\n  // Toggle sound\n  const toggleSound = () => {\n    const newSoundOn = !soundOn;\n    setSoundOn(newSoundOn);\n    soundEffects.setMuted(!newSoundOn);\n  };\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    \n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then((data) => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch((error) => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Validate board and indices to prevent errors\n    if (!game || !game.board || \n        row < 0 || row >= game.board.length || \n        col < 0 || col >= game.board[row].length ||\n        game.board[row][col] === null) return;\n\n    // Resume audio context on first interaction\n    soundEffects.resume();\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      soundEffects.click();\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Play pop sound for selection\n      soundEffects.pop();\n      \n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, { row, col, key: cellKey, value: game.board[row][col] }];\n      \n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        if (canRemove(cell1, cell2)) {\n          // Play success sound\n          soundEffects.success();\n          \n          // Add success animation for selected cells\n          setSuccessCells([cell1.key, cell2.key]);\n          setTimeout(() => setSuccessCells([]), 500);\n          \n          handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n          setSelectedCells([]); // Clear selection after attempt\n        } else {\n          // Play error sound\n          soundEffects.error();\n          \n          // If not removable, trigger shake animation\n          setShakeBoard(true);\n          setTimeout(() => setShakeBoard(false), 500);\n          setSelectedCells([]);\n        }\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Checks if two selected cells can be removed (same number or sum to 10)\n  const canRemove = (cell1, cell2) => {\n    return cell1.value === cell2.value || cell1.value + cell2.value === 10;\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    // Add fade out animation for cells being removed\n    const cell1Key = `${pos1[0]},${pos1[1]}`;\n    const cell2Key = `${pos2[0]},${pos2[1]}`;\n    setRemovedCells([cell1Key, cell2Key]);\n    \n    removeNumbers(game, pos1, pos2)\n      .then((data) => {\n        // Play remove sound\n        soundEffects.remove();\n        \n        setGame(data); // Update the board with the new state\n        // Clear removed cells animation after a short delay\n        setTimeout(() => setRemovedCells([]), 300);\n        // Check if game is won\n        if (data.game_won) {\n          // Play win sound\n          soundEffects.win();\n          setTimeout(() => alert(\"Game Win! 🎉\"), 800); // Delay alert to let win sound play\n        }\n      })\n      .catch(async (error) => {\n        // If error, show a message and clear selection\n        let message = \"제거할 수 없습니다.\";\n        if (error && error.response) {\n          try {\n            const errJson = await error.response.json();\n            if (errJson && errJson.detail) message = errJson.detail;\n          } catch {}\n        }\n        alert(message);\n        setSelectedCells([]); // Only clear selection, don't change the board\n        setRemovedCells([]); // Clear removed cells animation\n      });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    \n    // Request animation states from backend\n    addNumbers(game, true).then((data) => {\n      if (data.animation && data.states) {\n        // Handle animation states\n        animateAddNumbers(data.states);\n      } else {\n        // Fallback to immediate update (no animation)\n        setGame(data);\n      }\n    }).catch((error) => {\n      console.error(\"Failed to add numbers:\", error);\n      // Fallback to non-animated version\n      addNumbers(game, false).then((data) => {\n        setGame(data);\n      });\n    });\n  };\n\n  // Animate the placement of numbers step by step\n  const animateAddNumbers = (animationStates) => {\n    let currentStep = 0;\n    \n    const animateStep = () => {\n      if (currentStep >= animationStates.length) {\n        // Clear animation state when complete\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        return; // Animation complete\n      }\n      \n      const step = animationStates[currentStep];\n      \n      if (step.step === \"empty_board\") {\n        // Show empty board with new rows\n        setGame(step.state);\n        setIsExpanding(true);\n        \n        // Mark all new empty cells for fade-in animation\n        const newEmptyCells = [];\n        const originalRowCount = game.board.length;\n        for (let i = originalRowCount; i < step.state.board.length; i++) {\n          for (let j = 0; j < step.state.board[i].length; j++) {\n            newEmptyCells.push(`${i},${j}`);\n          }\n        }\n        setEmptyCells(newEmptyCells);\n        \n        currentStep++;\n        setTimeout(animateStep, 500); // Wait 500ms before starting to place numbers\n      } else if (step.step === \"place_number\") {\n        // Place number with animation\n        setGame(step.state);\n        setIsExpanding(false); // Stop expanding animation when placing numbers\n        \n        // Mark the newly placed number for drop-in animation\n        const newNumberKey = `${step.position[0]},${step.position[1]}`;\n        setNewNumbers([newNumberKey]);\n        \n        // Play sound for number placement\n        soundEffects.pop();\n        \n        currentStep++;\n        // Faster animation for number placement (100ms between each number)\n        setTimeout(animateStep, 100);\n      } else if (step.step === \"complete\") {\n        // Final state\n        setGame(step.state);\n        // Clear animation state\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        // Play completion sound\n        soundEffects.success();\n      }\n    };\n    \n    // Start animation\n    animateStep();\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n\n  // Main render: title, controls row (new game left, add right), and board\n  return (\n    <div className=\"app\">\n      {/* Sound toggle button at top right, left of How to Play */}\n      <button\n        className={`sound-toggle-btn${soundOn ? \"\" : \" sound-off\"}`}\n        onClick={toggleSound}\n        title={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n        aria-label={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n      >\n        {soundOn ? \"🔊\" : \"🔇\"}\n      </button>\n      {/* How to Play button at top right */}\n      <button \n        className=\"howto-btn\" \n        onClick={() => {\n          soundEffects.resume();\n          soundEffects.click();\n          setShowHowTo(true);\n        }} \n        title=\"How to Play\"\n      >\n        ?\n      </button>\n      <HowToPlayModal open={showHowTo} onClose={() => setShowHowTo(false)} />\n      <h1 className=\"game-title\">Number Game</h1>\n      <div className=\"controls-row\">\n        <button className=\"new-game-button\" onClick={startNewGame}>New Game</button>\n        {game && <Controls remaining={game.remaining_adds} onAdd={handleAdd} />}\n      </div>\n      <Board \n        board={game?.board || []} \n        onCellClick={handleCellClick}\n        selectedCells={selectedCells}\n        isCellSelected={isCellSelected}\n        shakeBoard={shakeBoard}\n        removedCells={removedCells}\n        successCells={successCells}\n        newNumbers={newNumbers}\n        emptyCells={emptyCells}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}