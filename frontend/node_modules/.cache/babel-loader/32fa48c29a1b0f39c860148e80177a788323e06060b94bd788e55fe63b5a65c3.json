{"ast":null,"code":"var _jsxFileName = \"/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport soundEffects from \"./utils/soundEffects\";\nimport \"./App.css\";\n\n// Simple modal popup for game instructions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction HowToPlayModal({\n  open,\n  onClose\n}) {\n  if (!open) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    onClick: onClose,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      onClick: e => e.stopPropagation(),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"You can remove two numbers if they are \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"adjacent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 54\n          }, this), \" (including diagonals), or if there are no numbers between them (even across rows).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"The two numbers must be \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"the same\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 39\n          }, this), \" or \", /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"sum to 10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 58\n          }, this), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"You can add a new set of 36 numbers up to 5 times using the Add Numbers button.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click two numbers to try to remove them. If not removable, your selection will be cleared.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close-modal\",\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n// Main React component for the Number Game\n_c = HowToPlayModal;\nexport default function App() {\n  _s();\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n  // showHowTo: controls visibility of the How to Play modal\n  const [showHowTo, setShowHowTo] = useState(false);\n  // animation states\n  const [shakeBoard, setShakeBoard] = useState(false);\n  const [removedCells, setRemovedCells] = useState([]);\n  const [successCells, setSuccessCells] = useState([]);\n  // 숫자 추가 애니메이션용 state\n  const [newCells, setNewCells] = useState([]);\n  // 이전 board 저장용 ref\n  const prevBoardRef = useRef(null);\n  // sound on/off state\n  const [soundOn, setSoundOn] = useState(true);\n\n  // Toggle sound\n  const toggleSound = () => {\n    const newSoundOn = !soundOn;\n    setSoundOn(newSoundOn);\n    soundEffects.setMuted(!newSoundOn);\n  };\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then(data => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Validate board and indices to prevent errors\n    if (!game || !game.board || row < 0 || row >= game.board.length || col < 0 || col >= game.board[row].length || game.board[row][col] === null) return;\n\n    // Resume audio context on first interaction\n    soundEffects.resume();\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      soundEffects.click();\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Play pop sound for selection\n      soundEffects.pop();\n\n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, {\n        row,\n        col,\n        key: cellKey,\n        value: game.board[row][col]\n      }];\n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        // Always attempt removal - let the backend handle all validation\n        handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n        setSelectedCells([]); // Clear selection after attempt\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    // Add fade out animation for cells being removed\n    const cell1Key = `${pos1[0]},${pos1[1]}`;\n    const cell2Key = `${pos2[0]},${pos2[1]}`;\n    setRemovedCells([cell1Key, cell2Key]);\n    removeNumbers(game, pos1, pos2).then(data => {\n      // Play success sound and add success animation\n      soundEffects.success();\n      setSuccessCells([cell1Key, cell2Key]);\n      setTimeout(() => setSuccessCells([]), 500);\n\n      // Play remove sound\n      soundEffects.remove();\n      setGame(data); // Update the board with the new state\n      // Clear removed cells animation after a short delay\n      setTimeout(() => setRemovedCells([]), 300);\n      // Check if game is won\n      if (data.game_won) {\n        // Play win sound\n        soundEffects.win();\n        setTimeout(() => alert(\"Game Win! 🎉\"), 800); // Delay alert to let win sound play\n      }\n    }).catch(async error => {\n      // Play error sound and trigger shake animation\n      soundEffects.error();\n      setShakeBoard(true);\n      setTimeout(() => setShakeBoard(false), 500);\n      setSelectedCells([]); // Only clear selection, don't change the board\n      setRemovedCells([]); // Clear removed cells animation\n    });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    soundEffects.resume();\n    soundEffects.click();\n    addNumbers(game).then(data => {\n      // 새로 추가된 셀 위치 계산\n      const prevBoard = (game === null || game === void 0 ? void 0 : game.board) || [];\n      const nextBoard = (data === null || data === void 0 ? void 0 : data.board) || [];\n      const newCellKeys = [];\n      // 2차원 배열 비교: 새 board에서 값이 있고, prev에는 없거나 null인 위치를 찾음\n      for (let i = 0; i < nextBoard.length; i++) {\n        for (let j = 0; j < nextBoard[i].length; j++) {\n          var _prevBoard$i;\n          const prevVal = (_prevBoard$i = prevBoard[i]) === null || _prevBoard$i === void 0 ? void 0 : _prevBoard$i[j];\n          const nextVal = nextBoard[i][j];\n          if (nextVal !== null && (prevVal === undefined || prevVal === null)) {\n            newCellKeys.push(`${i},${j}`);\n          }\n        }\n      }\n      setGame(data);\n      setNewCells(newCellKeys);\n      // 애니메이션 후 newCells 비움\n      setTimeout(() => setNewCells([]), 700);\n      // prevBoardRef 갱신\n      prevBoardRef.current = nextBoard;\n    }).catch(async error => {\n      // Handle error when adding numbers - just clear selection and show feedback\n      soundEffects.error();\n      setShakeBoard(true);\n      setTimeout(() => setShakeBoard(false), 500);\n    });\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 25\n  }, this);\n\n  // Main render: title, controls row (new game left, add right), and board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `sound-toggle-btn${soundOn ? \"\" : \" sound-off\"}`,\n      onClick: toggleSound,\n      title: soundOn ? \"효과음 끄기\" : \"효과음 켜기\",\n      \"aria-label\": soundOn ? \"효과음 끄기\" : \"효과음 켜기\",\n      children: soundOn ? \"🔊\" : \"🔇\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"howto-btn\",\n      onClick: () => {\n        soundEffects.resume();\n        soundEffects.click();\n        setShowHowTo(true);\n      },\n      title: \"How to Play\",\n      children: \"?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HowToPlayModal, {\n      open: showHowTo,\n      onClose: () => setShowHowTo(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-title\",\n      children: \"Number Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: startNewGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), game && /*#__PURE__*/_jsxDEV(Controls, {\n        remaining: game.remaining_adds,\n        onAdd: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: (game === null || game === void 0 ? void 0 : game.board) || [],\n      onCellClick: handleCellClick,\n      selectedCells: selectedCells,\n      isCellSelected: isCellSelected,\n      shakeBoard: shakeBoard,\n      removedCells: removedCells,\n      successCells: successCells,\n      newCells: newCells\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PTbNVmvrL3BhpGocuBmCmDcQ6o4=\");\n_c2 = App;\nvar _c, _c2;\n$RefreshReg$(_c, \"HowToPlayModal\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useRef","startGame","removeNumbers","addNumbers","Board","Controls","soundEffects","jsxDEV","_jsxDEV","HowToPlayModal","open","onClose","className","onClick","children","e","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s","game","setGame","selectedCells","setSelectedCells","isLoading","setIsLoading","showHowTo","setShowHowTo","shakeBoard","setShakeBoard","removedCells","setRemovedCells","successCells","setSuccessCells","newCells","setNewCells","prevBoardRef","soundOn","setSoundOn","toggleSound","newSoundOn","setMuted","startNewGame","resume","click","then","data","catch","error","console","handleCellClick","row","col","board","length","cellKey","isAlreadySelected","some","cell","key","filter","pop","newSelected","value","cell1","cell2","handleRemove","pos1","pos2","cell1Key","cell2Key","success","setTimeout","remove","game_won","win","alert","handleAdd","prevBoard","nextBoard","newCellKeys","i","j","_prevBoard$i","prevVal","nextVal","undefined","push","current","isCellSelected","title","remaining","remaining_adds","onAdd","onCellClick","_c2","$RefreshReg$"],"sources":["/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport soundEffects from \"./utils/soundEffects\";\nimport \"./App.css\";\n\n// Simple modal popup for game instructions\nfunction HowToPlayModal({ open, onClose }) {\n  if (!open) return null;\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <h2>How to Play</h2>\n        <ul>\n          <li>At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).</li>\n          <li>You can remove two numbers if they are <b>adjacent</b> (including diagonals), or if there are no numbers between them (even across rows).</li>\n          <li>The two numbers must be <b>the same</b> or <b>sum to 10</b>.</li>\n          <li>You can add a new set of 36 numbers up to 5 times using the Add Numbers button.</li>\n          <li>Click two numbers to try to remove them. If not removable, your selection will be cleared.</li>\n        </ul>\n        <button className=\"close-modal\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\n// Main React component for the Number Game\nexport default function App() {\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n  // showHowTo: controls visibility of the How to Play modal\n  const [showHowTo, setShowHowTo] = useState(false);\n  // animation states\n  const [shakeBoard, setShakeBoard] = useState(false);\n  const [removedCells, setRemovedCells] = useState([]);\n  const [successCells, setSuccessCells] = useState([]);\n  // 숫자 추가 애니메이션용 state\n  const [newCells, setNewCells] = useState([]);\n  // 이전 board 저장용 ref\n  const prevBoardRef = useRef(null);\n  // sound on/off state\n  const [soundOn, setSoundOn] = useState(true);\n\n  // Toggle sound\n  const toggleSound = () => {\n    const newSoundOn = !soundOn;\n    setSoundOn(newSoundOn);\n    soundEffects.setMuted(!newSoundOn);\n  };\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    \n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then((data) => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch((error) => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Validate board and indices to prevent errors\n    if (!game || !game.board || \n        row < 0 || row >= game.board.length || \n        col < 0 || col >= game.board[row].length ||\n        game.board[row][col] === null) return;\n\n    // Resume audio context on first interaction\n    soundEffects.resume();\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      soundEffects.click();\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Play pop sound for selection\n      soundEffects.pop();\n      \n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, { row, col, key: cellKey, value: game.board[row][col] }];\n      \n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        // Always attempt removal - let the backend handle all validation\n        handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n        setSelectedCells([]); // Clear selection after attempt\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    // Add fade out animation for cells being removed\n    const cell1Key = `${pos1[0]},${pos1[1]}`;\n    const cell2Key = `${pos2[0]},${pos2[1]}`;\n    setRemovedCells([cell1Key, cell2Key]);\n    \n    removeNumbers(game, pos1, pos2)\n      .then((data) => {\n        // Play success sound and add success animation\n        soundEffects.success();\n        setSuccessCells([cell1Key, cell2Key]);\n        setTimeout(() => setSuccessCells([]), 500);\n        \n        // Play remove sound\n        soundEffects.remove();\n        \n        setGame(data); // Update the board with the new state\n        // Clear removed cells animation after a short delay\n        setTimeout(() => setRemovedCells([]), 300);\n        // Check if game is won\n        if (data.game_won) {\n          // Play win sound\n          soundEffects.win();\n          setTimeout(() => alert(\"Game Win! 🎉\"), 800); // Delay alert to let win sound play\n        }\n      })\n      .catch(async (error) => {\n        // Play error sound and trigger shake animation\n        soundEffects.error();\n        setShakeBoard(true);\n        setTimeout(() => setShakeBoard(false), 500);\n        \n        setSelectedCells([]); // Only clear selection, don't change the board\n        setRemovedCells([]); // Clear removed cells animation\n      });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    soundEffects.resume();\n    soundEffects.click();\n    addNumbers(game).then((data) => {\n      // 새로 추가된 셀 위치 계산\n      const prevBoard = game?.board || [];\n      const nextBoard = data?.board || [];\n      const newCellKeys = [];\n      // 2차원 배열 비교: 새 board에서 값이 있고, prev에는 없거나 null인 위치를 찾음\n      for (let i = 0; i < nextBoard.length; i++) {\n        for (let j = 0; j < nextBoard[i].length; j++) {\n          const prevVal = prevBoard[i]?.[j];\n          const nextVal = nextBoard[i][j];\n          if (nextVal !== null && (prevVal === undefined || prevVal === null)) {\n            newCellKeys.push(`${i},${j}`);\n          }\n        }\n      }\n      setGame(data);\n      setNewCells(newCellKeys);\n      // 애니메이션 후 newCells 비움\n      setTimeout(() => setNewCells([]), 700);\n      // prevBoardRef 갱신\n      prevBoardRef.current = nextBoard;\n    }).catch(async (error) => {\n      // Handle error when adding numbers - just clear selection and show feedback\n      soundEffects.error();\n      setShakeBoard(true);\n      setTimeout(() => setShakeBoard(false), 500);\n    });\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n\n  // Main render: title, controls row (new game left, add right), and board\n  return (\n    <div className=\"app\">\n      {/* Sound toggle button at top right, left of How to Play */}\n      <button\n        className={`sound-toggle-btn${soundOn ? \"\" : \" sound-off\"}`}\n        onClick={toggleSound}\n        title={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n        aria-label={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n      >\n        {soundOn ? \"🔊\" : \"🔇\"}\n      </button>\n      {/* How to Play button at top right */}\n      <button \n        className=\"howto-btn\" \n        onClick={() => {\n          soundEffects.resume();\n          soundEffects.click();\n          setShowHowTo(true);\n        }} \n        title=\"How to Play\"\n      >\n        ?\n      </button>\n      <HowToPlayModal open={showHowTo} onClose={() => setShowHowTo(false)} />\n      <h1 className=\"game-title\">Number Game</h1>\n      <div className=\"controls-row\">\n        <button className=\"new-game-button\" onClick={startNewGame}>New Game</button>\n        {game && <Controls remaining={game.remaining_adds} onAdd={handleAdd} />}\n      </div>\n      <Board \n        board={game?.board || []} \n        onCellClick={handleCellClick}\n        selectedCells={selectedCells}\n        isCellSelected={isCellSelected}\n        shakeBoard={shakeBoard}\n        removedCells={removedCells}\n        successCells={successCells}\n        newCells={newCells}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}