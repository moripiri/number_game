{"ast":null,"code":"var _jsxFileName = \"/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport \"./App.css\";\n\n// Main React component for the Number Game\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then(data => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch(error => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Ignore clicks on empty cells\n    if (!game || game.board[row][col] === null) return;\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, {\n        row,\n        col,\n        key: cellKey,\n        value: game.board[row][col]\n      }];\n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        if (canRemove(cell1, cell2)) {\n          handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n          setSelectedCells([]); // Clear selection after attempt\n        } else {\n          // If not removable, just keep both selected\n          setSelectedCells(newSelected);\n        }\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Checks if two selected cells can be removed (same number or sum to 10)\n  const canRemove = (cell1, cell2) => {\n    return cell1.value === cell2.value || cell1.value + cell2.value === 10;\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    removeNumbers(game, pos1, pos2).then(data => {\n      setGame(data); // Update the board with the new state\n    }).catch(async error => {\n      // If error, show a message and clear selection\n      let message = \"제거할 수 없습니다.\";\n      if (error && error.response) {\n        try {\n          const errJson = await error.response.json();\n          if (errJson && errJson.detail) message = errJson.detail;\n        } catch {}\n      }\n      alert(message);\n      setSelectedCells([]); // Only clear selection, don't change the board\n    });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    addNumbers(game).then(data => {\n      setGame(data);\n    });\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 25\n  }, this);\n\n  // Main render: title, controls row (new game left, add right), and board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-title\",\n      children: \"Number Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-game-button\",\n        onClick: startNewGame,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), game && /*#__PURE__*/_jsxDEV(Controls, {\n        remaining: game.remaining_adds,\n        onAdd: handleAdd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: (game === null || game === void 0 ? void 0 : game.board) || [],\n      onCellClick: handleCellClick,\n      selectedCells: selectedCells,\n      isCellSelected: isCellSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bscwIhK2MPZTBPbVTg1EsyEMRVE=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","startGame","removeNumbers","addNumbers","Board","Controls","jsxDEV","_jsxDEV","App","_s","game","setGame","selectedCells","setSelectedCells","isLoading","setIsLoading","startNewGame","then","data","catch","error","console","handleCellClick","row","col","board","cellKey","isAlreadySelected","some","cell","key","filter","newSelected","value","length","cell1","cell2","canRemove","handleRemove","pos1","pos2","message","response","errJson","json","detail","alert","handleAdd","isCellSelected","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","flex","remaining","remaining_adds","onAdd","onCellClick","_c","$RefreshReg$"],"sources":["/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport \"./App.css\";\n\n// Main React component for the Number Game\nexport default function App() {\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then((data) => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch((error) => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Ignore clicks on empty cells\n    if (!game || game.board[row][col] === null) return;\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, { row, col, key: cellKey, value: game.board[row][col] }];\n      \n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        if (canRemove(cell1, cell2)) {\n          handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n          setSelectedCells([]); // Clear selection after attempt\n        } else {\n          // If not removable, just keep both selected\n          setSelectedCells(newSelected);\n        }\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Checks if two selected cells can be removed (same number or sum to 10)\n  const canRemove = (cell1, cell2) => {\n    return cell1.value === cell2.value || cell1.value + cell2.value === 10;\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    removeNumbers(game, pos1, pos2)\n      .then((data) => {\n        setGame(data); // Update the board with the new state\n      })\n      .catch(async (error) => {\n        // If error, show a message and clear selection\n        let message = \"제거할 수 없습니다.\";\n        if (error && error.response) {\n          try {\n            const errJson = await error.response.json();\n            if (errJson && errJson.detail) message = errJson.detail;\n          } catch {}\n        }\n        alert(message);\n        setSelectedCells([]); // Only clear selection, don't change the board\n      });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    addNumbers(game).then((data) => {\n      setGame(data);\n    });\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n\n  // Main render: title, controls row (new game left, add right), and board\n  return (\n    <div className=\"app\">\n      <h1 className=\"game-title\">Number Game</h1>\n      <div className=\"controls-row\">\n        <button className=\"new-game-button\" onClick={startNewGame}>New Game</button>\n        <div style={{ flex: 1 }} />\n        {game && <Controls remaining={game.remaining_adds} onAdd={handleAdd} />}\n      </div>\n      <Board \n        board={game?.board || []} \n        onCellClick={handleCellClick}\n        selectedCells={selectedCells}\n        isCellSelected={isCellSelected}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}