{"ast":null,"code":"import React,{useEffect,useState}from\"react\";import{startGame,removeNumbers,addNumbers}from\"./api/gameApi\";import Board from\"./components/Board\";import Controls from\"./components/Controls\";import soundEffects from\"./utils/soundEffects\";import\"./App.css\";// Simple modal popup for game instructions\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function HowToPlayModal(_ref){let{open,onClose}=_ref;if(!open)return null;return/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",onClick:onClose,children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal-content\",onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"h2\",{children:\"How to Play\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).\"}),/*#__PURE__*/_jsxs(\"li\",{children:[\"You can remove two numbers if they are \",/*#__PURE__*/_jsx(\"b\",{children:\"adjacent\"}),\" (including diagonals), or if there are no numbers between them (even across rows).\"]}),/*#__PURE__*/_jsxs(\"li\",{children:[\"The two numbers must be \",/*#__PURE__*/_jsx(\"b\",{children:\"the same\"}),\" or \",/*#__PURE__*/_jsx(\"b\",{children:\"sum to 10\"}),\".\"]}),/*#__PURE__*/_jsx(\"li\",{children:\"You can add a new set of 36 numbers up to 5 times using the Add Numbers button.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Click two numbers to try to remove them. If not removable, your selection will be cleared.\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-modal\",onClick:onClose,children:\"Close\"})]})});}// Main React component for the Number Game\nexport default function App(){// game: stores the current game state (board, remaining adds)\nconst[game,setGame]=useState(null);// selectedCells: stores which cells the user has currently selected\nconst[selectedCells,setSelectedCells]=useState([]);// isLoading: true while the game is being initialized\nconst[isLoading,setIsLoading]=useState(true);// showHowTo: controls visibility of the How to Play modal\nconst[showHowTo,setShowHowTo]=useState(false);// animation states\nconst[shakeBoard,setShakeBoard]=useState(false);const[removedCells,setRemovedCells]=useState([]);const[successCells,setSuccessCells]=useState([]);const[newNumbers,setNewNumbers]=useState([]);const[emptyCells,setEmptyCells]=useState([]);const[isExpanding,setIsExpanding]=useState(false);// sound on/off state\nconst[soundOn,setSoundOn]=useState(true);// Toggle sound\nconst toggleSound=()=>{const newSoundOn=!soundOn;setSoundOn(newSoundOn);soundEffects.setMuted(!newSoundOn);};// Function to start a new game (used for both initial load and 'New Game' button)\nconst startNewGame=()=>{// Resume audio context on first interaction\nsoundEffects.resume();soundEffects.click();setIsLoading(true);setSelectedCells([]);startGame().then(data=>{setGame(data);setIsLoading(false);}).catch(error=>{console.error(\"Failed to start game:\",error);setIsLoading(false);});};// useEffect runs once when the component mounts (like componentDidMount)\nuseEffect(()=>{startNewGame();// Start a new game on first load\n},[]);// empty dependency array: only run once\n// Handles when a user clicks a cell on the board\nconst handleCellClick=(row,col)=>{// Validate board and indices to prevent errors\nif(!game||!game.board||row<0||row>=game.board.length||col<0||col>=game.board[row].length||game.board[row][col]===null)return;// Resume audio context on first interaction\nsoundEffects.resume();// Create a unique key for the cell\nconst cellKey=`${row},${col}`;// Check if this cell is already selected\nconst isAlreadySelected=selectedCells.some(cell=>cell.key===cellKey);if(isAlreadySelected){// If already selected, unselect it\nsoundEffects.click();setSelectedCells(selectedCells.filter(cell=>cell.key!==cellKey));}else{// Play pop sound for selection\nsoundEffects.pop();// Otherwise, add it to the selection\nconst newSelected=[...selectedCells,{row,col,key:cellKey,value:game.board[row][col]}];if(newSelected.length===2){// If two cells are selected, try to remove them\nconst[cell1,cell2]=newSelected;if(canRemove(cell1,cell2)){// Play success sound\nsoundEffects.success();// Add success animation for selected cells\nsetSuccessCells([cell1.key,cell2.key]);setTimeout(()=>setSuccessCells([]),500);handleRemove([cell1.row,cell1.col],[cell2.row,cell2.col]);setSelectedCells([]);// Clear selection after attempt\n}else{// Play error sound\nsoundEffects.error();// If not removable, trigger shake animation\nsetShakeBoard(true);setTimeout(()=>setShakeBoard(false),500);setSelectedCells([]);}}else{setSelectedCells(newSelected);}}};// Checks if two selected cells can be removed (same number or sum to 10)\nconst canRemove=(cell1,cell2)=>{return cell1.value===cell2.value||cell1.value+cell2.value===10;};// Handles the actual removal by calling the backend\nconst handleRemove=(pos1,pos2)=>{// Add fade out animation for cells being removed\nconst cell1Key=`${pos1[0]},${pos1[1]}`;const cell2Key=`${pos2[0]},${pos2[1]}`;setRemovedCells([cell1Key,cell2Key]);removeNumbers(game,pos1,pos2).then(data=>{// Play remove sound\nsoundEffects.remove();setGame(data);// Update the board with the new state\n// Clear removed cells animation after a short delay\nsetTimeout(()=>setRemovedCells([]),300);// Check if game is won\nif(data.game_won){// Play win sound\nsoundEffects.win();setTimeout(()=>alert(\"Game Win! 🎉\"),800);// Delay alert to let win sound play\n}}).catch(async error=>{// If error, show a message and clear selection\nlet message=\"제거할 수 없습니다.\";if(error&&error.response){try{const errJson=await error.response.json();if(errJson&&errJson.detail)message=errJson.detail;}catch{}}alert(message);setSelectedCells([]);// Only clear selection, don't change the board\nsetRemovedCells([]);// Clear removed cells animation\n});};// Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\nconst handleAdd=()=>{// Resume audio context on first interaction\nsoundEffects.resume();soundEffects.click();// Request animation states from backend\naddNumbers(game,true).then(data=>{if(data.animation&&data.states){// Handle animation states\nanimateAddNumbers(data.states);}else{// Fallback to immediate update (no animation)\nsetGame(data);}}).catch(error=>{console.error(\"Failed to add numbers:\",error);// Fallback to non-animated version\naddNumbers(game,false).then(data=>{setGame(data);});});};// Animate the placement of numbers step by step\nconst animateAddNumbers=animationStates=>{let currentStep=0;let animationTimeout=null;// Set a timeout to fallback to immediate add if animation takes too long\nconst fallbackTimeout=setTimeout(()=>{console.log(\"Animation timeout, falling back to immediate add\");addNumbers(game,false).then(data=>{setGame(data);setNewNumbers([]);setEmptyCells([]);setIsExpanding(false);});},10000);// 10 second timeout\nconst animateStep=()=>{if(currentStep>=animationStates.length){// Clear timeout and animation state when complete\nclearTimeout(fallbackTimeout);setNewNumbers([]);setEmptyCells([]);setIsExpanding(false);return;// Animation complete\n}const step=animationStates[currentStep];if(step.step===\"empty_board\"){// Show empty board with new rows\nsetGame(step.state);setIsExpanding(true);// Mark all new empty cells for fade-in animation\nconst newEmptyCells=[];const originalRowCount=game.board.length;for(let i=originalRowCount;i<step.state.board.length;i++){for(let j=0;j<step.state.board[i].length;j++){newEmptyCells.push(`${i},${j}`);}}setEmptyCells(newEmptyCells);currentStep++;animationTimeout=setTimeout(animateStep,500);// Wait 500ms before starting to place numbers\n}else if(step.step===\"place_number\"){// Place number with animation\nsetGame(step.state);setIsExpanding(false);// Stop expanding animation when placing numbers\n// Mark the newly placed number for drop-in animation\nconst newNumberKey=`${step.position[0]},${step.position[1]}`;setNewNumbers([newNumberKey]);// Play sound for number placement\nsoundEffects.pop();currentStep++;// Faster animation for number placement (100ms between each number)\nanimationTimeout=setTimeout(animateStep,100);}else if(step.step===\"complete\"){// Final state - ensure this is the complete state with all numbers\nclearTimeout(fallbackTimeout);setGame(step.state);// Clear animation state\nsetNewNumbers([]);setEmptyCells([]);setIsExpanding(false);// Play completion sound\nsoundEffects.success();// Verify that all numbers are properly placed and available\nconsole.log(\"Animation complete. Final board state:\",step.state.board);}};// Start animation\nanimateStep();// Return cleanup function\nreturn()=>{clearTimeout(fallbackTimeout);if(animationTimeout){clearTimeout(animationTimeout);}};};// Helper to check if a cell is currently selected\nconst isCellSelected=(row,col)=>{return selectedCells.some(cell=>cell.row===row&&cell.col===col);};// Show loading message while initializing\nif(isLoading)return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"});// Main render: title, controls row (new game left, add right), and board\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"button\",{className:`sound-toggle-btn${soundOn?\"\":\" sound-off\"}`,onClick:toggleSound,title:soundOn?\"효과음 끄기\":\"효과음 켜기\",\"aria-label\":soundOn?\"효과음 끄기\":\"효과음 켜기\",children:soundOn?\"🔊\":\"🔇\"}),/*#__PURE__*/_jsx(\"button\",{className:\"howto-btn\",onClick:()=>{soundEffects.resume();soundEffects.click();setShowHowTo(true);},title:\"How to Play\",children:\"?\"}),/*#__PURE__*/_jsx(HowToPlayModal,{open:showHowTo,onClose:()=>setShowHowTo(false)}),/*#__PURE__*/_jsx(\"h1\",{className:\"game-title\",children:\"Number Game\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls-row\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"new-game-button\",onClick:startNewGame,children:\"New Game\"}),game&&/*#__PURE__*/_jsx(Controls,{remaining:game.remaining_adds,onAdd:handleAdd})]}),/*#__PURE__*/_jsx(Board,{board:(game===null||game===void 0?void 0:game.board)||[],onCellClick:handleCellClick,selectedCells:selectedCells,isCellSelected:isCellSelected,shakeBoard:shakeBoard,removedCells:removedCells,successCells:successCells,newNumbers:newNumbers,emptyCells:emptyCells,isExpanding:isExpanding})]});}","map":{"version":3,"names":["React","useEffect","useState","startGame","removeNumbers","addNumbers","Board","Controls","soundEffects","jsx","_jsx","jsxs","_jsxs","HowToPlayModal","_ref","open","onClose","className","onClick","children","e","stopPropagation","App","game","setGame","selectedCells","setSelectedCells","isLoading","setIsLoading","showHowTo","setShowHowTo","shakeBoard","setShakeBoard","removedCells","setRemovedCells","successCells","setSuccessCells","newNumbers","setNewNumbers","emptyCells","setEmptyCells","isExpanding","setIsExpanding","soundOn","setSoundOn","toggleSound","newSoundOn","setMuted","startNewGame","resume","click","then","data","catch","error","console","handleCellClick","row","col","board","length","cellKey","isAlreadySelected","some","cell","key","filter","pop","newSelected","value","cell1","cell2","canRemove","success","setTimeout","handleRemove","pos1","pos2","cell1Key","cell2Key","remove","game_won","win","alert","message","response","errJson","json","detail","handleAdd","animation","states","animateAddNumbers","animationStates","currentStep","animationTimeout","fallbackTimeout","log","animateStep","clearTimeout","step","state","newEmptyCells","originalRowCount","i","j","push","newNumberKey","position","isCellSelected","title","remaining","remaining_adds","onAdd","onCellClick"],"sources":["/Users/gil-yoonhee/PycharmProjects/number_game/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { startGame, removeNumbers, addNumbers } from \"./api/gameApi\";\nimport Board from \"./components/Board\";\nimport Controls from \"./components/Controls\";\nimport soundEffects from \"./utils/soundEffects\";\nimport \"./App.css\";\n\n// Simple modal popup for game instructions\nfunction HowToPlayModal({ open, onClose }) {\n  if (!open) return null;\n  return (\n    <div className=\"modal-overlay\" onClick={onClose}>\n      <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\n        <h2>How to Play</h2>\n        <ul>\n          <li>At the start, 4 of each number from 1 to 9 are randomly placed in a 4x9 board (36 numbers).</li>\n          <li>You can remove two numbers if they are <b>adjacent</b> (including diagonals), or if there are no numbers between them (even across rows).</li>\n          <li>The two numbers must be <b>the same</b> or <b>sum to 10</b>.</li>\n          <li>You can add a new set of 36 numbers up to 5 times using the Add Numbers button.</li>\n          <li>Click two numbers to try to remove them. If not removable, your selection will be cleared.</li>\n        </ul>\n        <button className=\"close-modal\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\n// Main React component for the Number Game\nexport default function App() {\n  // game: stores the current game state (board, remaining adds)\n  const [game, setGame] = useState(null);\n  // selectedCells: stores which cells the user has currently selected\n  const [selectedCells, setSelectedCells] = useState([]);\n  // isLoading: true while the game is being initialized\n  const [isLoading, setIsLoading] = useState(true);\n  // showHowTo: controls visibility of the How to Play modal\n  const [showHowTo, setShowHowTo] = useState(false);\n  // animation states\n  const [shakeBoard, setShakeBoard] = useState(false);\n  const [removedCells, setRemovedCells] = useState([]);\n  const [successCells, setSuccessCells] = useState([]);\n  const [newNumbers, setNewNumbers] = useState([]);\n  const [emptyCells, setEmptyCells] = useState([]);\n  const [isExpanding, setIsExpanding] = useState(false);\n  // sound on/off state\n  const [soundOn, setSoundOn] = useState(true);\n\n  // Toggle sound\n  const toggleSound = () => {\n    const newSoundOn = !soundOn;\n    setSoundOn(newSoundOn);\n    soundEffects.setMuted(!newSoundOn);\n  };\n\n  // Function to start a new game (used for both initial load and 'New Game' button)\n  const startNewGame = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    \n    setIsLoading(true);\n    setSelectedCells([]);\n    startGame().then((data) => {\n      setGame(data);\n      setIsLoading(false);\n    }).catch((error) => {\n      console.error(\"Failed to start game:\", error);\n      setIsLoading(false);\n    });\n  };\n\n  // useEffect runs once when the component mounts (like componentDidMount)\n  useEffect(() => {\n    startNewGame(); // Start a new game on first load\n  }, []); // empty dependency array: only run once\n\n  // Handles when a user clicks a cell on the board\n  const handleCellClick = (row, col) => {\n    // Validate board and indices to prevent errors\n    if (!game || !game.board || \n        row < 0 || row >= game.board.length || \n        col < 0 || col >= game.board[row].length ||\n        game.board[row][col] === null) return;\n\n    // Resume audio context on first interaction\n    soundEffects.resume();\n\n    // Create a unique key for the cell\n    const cellKey = `${row},${col}`;\n    // Check if this cell is already selected\n    const isAlreadySelected = selectedCells.some(cell => cell.key === cellKey);\n\n    if (isAlreadySelected) {\n      // If already selected, unselect it\n      soundEffects.click();\n      setSelectedCells(selectedCells.filter(cell => cell.key !== cellKey));\n    } else {\n      // Play pop sound for selection\n      soundEffects.pop();\n      \n      // Otherwise, add it to the selection\n      const newSelected = [...selectedCells, { row, col, key: cellKey, value: game.board[row][col] }];\n      \n      if (newSelected.length === 2) {\n        // If two cells are selected, try to remove them\n        const [cell1, cell2] = newSelected;\n        if (canRemove(cell1, cell2)) {\n          // Play success sound\n          soundEffects.success();\n          \n          // Add success animation for selected cells\n          setSuccessCells([cell1.key, cell2.key]);\n          setTimeout(() => setSuccessCells([]), 500);\n          \n          handleRemove([cell1.row, cell1.col], [cell2.row, cell2.col]);\n          setSelectedCells([]); // Clear selection after attempt\n        } else {\n          // Play error sound\n          soundEffects.error();\n          \n          // If not removable, trigger shake animation\n          setShakeBoard(true);\n          setTimeout(() => setShakeBoard(false), 500);\n          setSelectedCells([]);\n        }\n      } else {\n        setSelectedCells(newSelected);\n      }\n    }\n  };\n\n  // Checks if two selected cells can be removed (same number or sum to 10)\n  const canRemove = (cell1, cell2) => {\n    return cell1.value === cell2.value || cell1.value + cell2.value === 10;\n  };\n\n  // Handles the actual removal by calling the backend\n  const handleRemove = (pos1, pos2) => {\n    // Add fade out animation for cells being removed\n    const cell1Key = `${pos1[0]},${pos1[1]}`;\n    const cell2Key = `${pos2[0]},${pos2[1]}`;\n    setRemovedCells([cell1Key, cell2Key]);\n    \n    removeNumbers(game, pos1, pos2)\n      .then((data) => {\n        // Play remove sound\n        soundEffects.remove();\n        \n        setGame(data); // Update the board with the new state\n        // Clear removed cells animation after a short delay\n        setTimeout(() => setRemovedCells([]), 300);\n        // Check if game is won\n        if (data.game_won) {\n          // Play win sound\n          soundEffects.win();\n          setTimeout(() => alert(\"Game Win! 🎉\"), 800); // Delay alert to let win sound play\n        }\n      })\n      .catch(async (error) => {\n        // If error, show a message and clear selection\n        let message = \"제거할 수 없습니다.\";\n        if (error && error.response) {\n          try {\n            const errJson = await error.response.json();\n            if (errJson && errJson.detail) message = errJson.detail;\n          } catch {}\n        }\n        alert(message);\n        setSelectedCells([]); // Only clear selection, don't change the board\n        setRemovedCells([]); // Clear removed cells animation\n      });\n  };\n\n  // Handles the \"Add Numbers\" button (adds a new set of numbers to the board)\n  const handleAdd = () => {\n    // Resume audio context on first interaction\n    soundEffects.resume();\n    soundEffects.click();\n    \n    // Request animation states from backend\n    addNumbers(game, true).then((data) => {\n      if (data.animation && data.states) {\n        // Handle animation states\n        animateAddNumbers(data.states);\n      } else {\n        // Fallback to immediate update (no animation)\n        setGame(data);\n      }\n    }).catch((error) => {\n      console.error(\"Failed to add numbers:\", error);\n      // Fallback to non-animated version\n      addNumbers(game, false).then((data) => {\n        setGame(data);\n      });\n    });\n  };\n\n  // Animate the placement of numbers step by step\n  const animateAddNumbers = (animationStates) => {\n    let currentStep = 0;\n    let animationTimeout = null;\n    \n    // Set a timeout to fallback to immediate add if animation takes too long\n    const fallbackTimeout = setTimeout(() => {\n      console.log(\"Animation timeout, falling back to immediate add\");\n      addNumbers(game, false).then((data) => {\n        setGame(data);\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n      });\n    }, 10000); // 10 second timeout\n    \n    const animateStep = () => {\n      if (currentStep >= animationStates.length) {\n        // Clear timeout and animation state when complete\n        clearTimeout(fallbackTimeout);\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        return; // Animation complete\n      }\n      \n      const step = animationStates[currentStep];\n      \n      if (step.step === \"empty_board\") {\n        // Show empty board with new rows\n        setGame(step.state);\n        setIsExpanding(true);\n        \n        // Mark all new empty cells for fade-in animation\n        const newEmptyCells = [];\n        const originalRowCount = game.board.length;\n        for (let i = originalRowCount; i < step.state.board.length; i++) {\n          for (let j = 0; j < step.state.board[i].length; j++) {\n            newEmptyCells.push(`${i},${j}`);\n          }\n        }\n        setEmptyCells(newEmptyCells);\n        \n        currentStep++;\n        animationTimeout = setTimeout(animateStep, 500); // Wait 500ms before starting to place numbers\n      } else if (step.step === \"place_number\") {\n        // Place number with animation\n        setGame(step.state);\n        setIsExpanding(false); // Stop expanding animation when placing numbers\n        \n        // Mark the newly placed number for drop-in animation\n        const newNumberKey = `${step.position[0]},${step.position[1]}`;\n        setNewNumbers([newNumberKey]);\n        \n        // Play sound for number placement\n        soundEffects.pop();\n        \n        currentStep++;\n        // Faster animation for number placement (100ms between each number)\n        animationTimeout = setTimeout(animateStep, 100);\n      } else if (step.step === \"complete\") {\n        // Final state - ensure this is the complete state with all numbers\n        clearTimeout(fallbackTimeout);\n        setGame(step.state);\n        // Clear animation state\n        setNewNumbers([]);\n        setEmptyCells([]);\n        setIsExpanding(false);\n        // Play completion sound\n        soundEffects.success();\n        \n        // Verify that all numbers are properly placed and available\n        console.log(\"Animation complete. Final board state:\", step.state.board);\n      }\n    };\n    \n    // Start animation\n    animateStep();\n    \n    // Return cleanup function\n    return () => {\n      clearTimeout(fallbackTimeout);\n      if (animationTimeout) {\n        clearTimeout(animationTimeout);\n      }\n    };\n  };\n\n  // Helper to check if a cell is currently selected\n  const isCellSelected = (row, col) => {\n    return selectedCells.some(cell => cell.row === row && cell.col === col);\n  };\n\n  // Show loading message while initializing\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n\n  // Main render: title, controls row (new game left, add right), and board\n  return (\n    <div className=\"app\">\n      {/* Sound toggle button at top right, left of How to Play */}\n      <button\n        className={`sound-toggle-btn${soundOn ? \"\" : \" sound-off\"}`}\n        onClick={toggleSound}\n        title={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n        aria-label={soundOn ? \"효과음 끄기\" : \"효과음 켜기\"}\n      >\n        {soundOn ? \"🔊\" : \"🔇\"}\n      </button>\n      {/* How to Play button at top right */}\n      <button \n        className=\"howto-btn\" \n        onClick={() => {\n          soundEffects.resume();\n          soundEffects.click();\n          setShowHowTo(true);\n        }} \n        title=\"How to Play\"\n      >\n        ?\n      </button>\n      <HowToPlayModal open={showHowTo} onClose={() => setShowHowTo(false)} />\n      <h1 className=\"game-title\">Number Game</h1>\n      <div className=\"controls-row\">\n        <button className=\"new-game-button\" onClick={startNewGame}>New Game</button>\n        {game && <Controls remaining={game.remaining_adds} onAdd={handleAdd} />}\n      </div>\n      <Board \n        board={game?.board || []} \n        onCellClick={handleCellClick}\n        selectedCells={selectedCells}\n        isCellSelected={isCellSelected}\n        shakeBoard={shakeBoard}\n        removedCells={removedCells}\n        successCells={successCells}\n        newNumbers={newNumbers}\n        emptyCells={emptyCells}\n        isExpanding={isExpanding}\n      />\n    </div>\n  );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}